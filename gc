#!/usr/bin/env python3

# Zac the Wise on 24 May
# Little script that adds emojis and labels for git commits
# More info: https://github.com/TechWiz-3/git-commit-emojis 

from sys import argv  # import cli arguement function
from sys import exit  # import exit function
from os import system


BOLD = "\u001b[1m"
RESET = "\033[0m"

def help():
    """Help command"""
    print(
        "\n"
        "Git emoji/labeling tool created by Zac the Wise"
        "\n\n"
        f"{BOLD}Basic Usage:{RESET}"
        "\n\n"
        "gc -m <commit message>"
        "\n\n"
        "      -h, --help      shows this command"
        "\n\n"
        "      -m <\"message\">     commit message (required), quotation marks not required"
        "\n\n"
        f"{BOLD}Advanced Usage:{RESET}"
        "\n\n"
        "ALTERNATE SELECT MENUS\nUsage:\ngc [select menu option] -m <commit message>"
        "\n\n   -e, --extras    displays a select menu with other labels that are used less often"
        "\n\n   -s, --strict    displays a select menu strictly in line with the emoji log project by ahmad awais"
        "\n\nSHORTCUTS"
        "\n\nThe commit option can be omitted for shortcut commit messages:\n"
        "\n\t-sh <shortcut>      puts the commit message for you as the value of 'shortcut'\n\n"
        "Available shortcuts:\n\n"
        "ty     commit message defaults to: ✏️ FIX TYPO\n"
        "cl     commit message defaults to: 🧹 CLEAN UP\n"
        "in     commit message defaults to: 🎉 INITIAL COMMIT\n"
        "ln     commit message defaults to: 🚨 FIX LINT WARNINGS\n"
        "\n\n"
    )

def get_opts():
    """Get cli options/arguements"""
    for arg in argv[1:]:  # gets arguements except the first one and assigns them
        if arg == "-m":  # message option
            commit_message = ""
            # get the argument for the option
            get_arg_index = argv.index('-m')  # find the index number for the option
            try:
                args_after_m = argv[get_arg_index+1:]
                for msg_word in args_after_m:
                    commit_message += f"{msg_word} "
                commit_message = commit_message[:-1]  # remove extra space from end
            except IndexError:
                return "error", "You didn't include the arguement for the commit message like so: -m \"my commit message\""
            else:
                if commit_message == "":  # if the commit message is empty
                    return "error", "Commit message cannot be empty"
                return "message only", commit_message
        elif arg == "-sh":
            get_arg_index = argv.index('-sh')  # find the index number for the option
            try:
                shortcut = argv[get_arg_index+1]  # get the arguement after the option and assign it
            except IndexError:
                    print("")
                    print("Shortcut usage: commit -sh shortcut")
                    print("")
                    print("Shortcuts use pre-prepared commit messages for simple commit messages, refer to them by their assigned abbreviation")
                    print("")
                    print("List of shortcuts:")
                    print("")
                    print("Value                           Message")
                    print("cl or clean                     🧹 CLEAN UPT")
                    print("ty or typo                      ✏️  FIX TYPO")
                    print("in or init or initial           🎉 INITIAL COMMIT")
                    print("ln or lint or linter            🚨 FIX LINT WARNINGS")
                    print("")
                    return exit()
            else:
                if shortcut == "ty" or shortcut == "typo":
                    commit_message = "✏️ FIX TYPO"
                    return "shortcut", commit_message
                elif shortcut == "cl" or shortcut == "clean":
                    commit_message = "🧹 CLEAN UP"
                    return "shortcut", commit_message
                elif shortcut == "in" or shortcut == "init" or shortcut == "initial":
                    commit_message = "🎉 INITIAL COMMIT"
                    return "shortcut", commit_message
                elif shortcut in ("ln", "lint", "linter"):
                    commit_message = "🚨 FIX LINT WARNINGS"
                    return "shortcut", commit_message
                else:
                    return "error", "Unrecognized shortcut usage. Use gc -sh for a list of available shortcuts"
        elif arg in ("-s", "--strict"):  # strict select menu option
            commit_message = ""  # label + user input message
            message = ""  # raw user input message
            get_arg_index = argv.index(arg)
            try:
                args_after_s = argv[get_arg_index+1:]
                if args_after_s[0] == "-m":
                    try:
                        message = args_after_s[1]
                    except IndexError:
                        return "error", "You didn't include the arguement for the commit message like so: -m \"my commit message\""
                    else:
                        if message == "":
                            return "error", "Commit message cannot be empty"
                        else:
                            message = args_after_s[1:]
                            for word in message:
                                commit_message += f"{word} "
                            return "strict", commit_message
                elif args_after_s[0] == "":
                    return "error", "After the -s or --strict, add the commit message directly or with the -m switch"
                else:
                    message = args_after_s[0:]
                    for word in message:
                        commit_message += f"{word} "
                    return "strict", commit_message
            except IndexError:
                return "error", "You need to include your commit message after the -s or --strict option, you can do this directly after the option or use the -m <commit message> option"
            # ensure next argument is -m
            # get the emssage
            # ensure the message isn't empty or non-existant
            # assign commit_message
            # return "message only", commit_message
        elif arg in ("-e", "--extra", "--extra-menu"):
            commit_message = ""
            message = ""
            get_arg_index = argv_index(arg)
            try:
                arg_after_e = argv[get_arg_index+1:]

            except IndexError:
                return "error", "You need to include your commit message after the -s or --strict option, you can do this directly after the option or use the -m <commit message> option"
            # get next arg
            # if next arg is m
            #   get arg after that
            # else get next arg and make it the message
            # return "extra", message
        elif arg in ("-sa", "--show-all", "--showall"):
            show_all()
            return exit()
        elif arg == "-h" or arg == "--help":  # help option
            help()  # display help message
            return exit()  # stop the rest of the program from running

def select_menu():
    """Displays the select menu and returns the value to enter into the commit"""
    options = ["👌 Improvement", "📦 Addition", "📖 Documentation", "🐛 Bug-fix", "🔖 Version-tag", "🚪 Exit"]
    commit_label = ""
    select_label = None
    for option in options:
        opt_no = options.index(option)
        print(f"{opt_no+1}) {option}")
    select_label = input("Enter the number corresponding to which type of change you made: ")
    try:  # attempt to convert input to an integer
        select_label = int(select_label)
    except ValueError:  # if a number isn't entered
        # attempt to remove any accidentally mistyped special characters
        from re import sub
        remove = "[m'/\\\\]"  # characters that can be easily mistyped with an enter press
        select_label = str(select_label)
        select_label = sub(remove, '', select_label)
        # after removing characters try converting back to integer
        try:
            select_label = int(select_label)
        except ValueError:  # if the conversion doesn't work
            print("🧙 This ain't fair, I'm a CLI tool not a wizard (yet). Please enter numbers not characters lol.")
            exit()

    select_menu_labels = {  # list each select menu number and it's corresponding commit label
        1   :   "👌 IMPROVE: ",
        2   :   "📦 NEW: ",
        3   :   "📖 DOC: ",
        4   :   "🐛 FIX: ",
        5   :   "🔖 "
    }
    # loop through the menu number and label
    for menu_number, label in select_menu_labels.items():
        if select_label == menu_number:
            commit_label = label
            return commit_label
    # if none of the label options were selected
    if select_label == 6:  # exit option
        print("Exiting have a nice day...")
        exit()
    else:
        print("Unrecognised menu option, exiting...")
        exit()


def second_menu():
    """Displays another select menu with more options that are used less often"""
    options = [
        "🔧 Configuration files",
        "🚚 Move files",
        "🙈 Ignore files",
        "❌ Remove files",
        "🚪 Exit"
    ]
    for option in options:
        opt_no = option.index(option)
        print(f"{opt_no + 1} {option}")
    select_label = int(input("Enter the number corresponding to which type of change you made: "))
    if select_label == 1:
        commit_label = "🔧 CONFIG: "
    elif select_label == 2:
        commit_label = "🚚 MOVE: "
    elif select_label == 3:
        commit_label = "🙈 IGNORE: "
    elif commit_label == 4:
        commit_label = "❌ REMOVE: "
    elif commit_label == 5:
        print("Exiting, have a nice day...")
        exit()
    else:
        print("Unrecognised menu option, exiting...")
        exit()
    return commit_label


def strict_menu():
    """Displays a select menu which strictly follows the labels specified by
    the emoji log project by ahmadawais"""
    options = ["👌 Improvement", "📦 Addition", "📖 Documentation", "🐛 Bug-fix", "🚀 Release", "🤖 Test", "‼️  Breaking", "🚪 Exit"]
    for option in options:
        opt_no = options.index(option)
        print(f"{opt_no+1}) {option}")
    select_label = int(input("Enter the number corresponding to which type of change you made: "))
    if select_label == 1:
        commit_label = "👌 IMPROVE: "
    elif select_label == 2:
        commit_label = "📦 NEW: "
    elif select_label == 3:
        commit_label = "📖 DOC: "
    elif select_label == 4:
        commit_label="🐛 FIX: "
    elif select_label == 5:
        commit_label = "🚀 RELEASE:  "
    elif select_label == 6:
        commit_label = "🤖 TEST: "
    elif select_label == 7:
        commit_label = "‼️ BREAKING: "
    elif select_label == 8:
        print("Exiting, have a nice day...")
        exit()
    else:
        print("Unrecognised menu option, exiting...")
        exit()
    return commit_label


def show_all():
    """Displays a list of all select menu options and their message results"""
    print("")
    print(f"{BOLD}Standard select menu:{RESET}")
    print("")
    print("1) 👌 Improvement        👌 IMPROVE: <message>")
    print("2) 📦 Addition           📦 NEW: <message>")
    print("3) 📖 Documentation      📖 DOC: <message>")
    print("4) 🐛 Bug-fix            🐛 FIX <message>")
    print("5) 🔖 Version-tag        🔖 <message>")
    print("")
    print("")
    print(f"{BOLD}Extra select menu{RESET}")
    print("")
    print("")
    print(f"{BOLD}Strict select menu (emoji-log){RESET}")
    print("")
    print("1) 👌 Improvement        👌 IMPROVE: <message>")
    print("2) 📦 Addition           📦 NEW: <message>")
    print("3) 📖 Documentation      📖 DOC: <message>")
    print("4) 🐛 Bug-fix            🐛 FIX: <message>")
    print("5) 🚀 Release            🚀 RELEASE: <message>")
    print("6) 🤖 Test               🤖 TEST: <message>")
    print("7) ‼️  Breaking           ‼️ BREAKING: <message>")
    print("")


if __name__ == "__main__":

    options = get_opts()
    if options == None:
        print("Incorrect usage. Refer to gc.py --help")
    else:
        typ, msg = options
        if typ == "message only":
            label = select_menu()
            system(f"git commit -m \"{label}{msg}\"")

        elif typ == "strict":
            label = strict_menu()
            system(f"git commit -m \"{label}{msg}\"")

        elif typ == "extra":
            label = second_menu()
            system(f"git commit -m \"{label}{msg}\"")

        elif typ == "shortcut":
            system(f"git commit -m \"{msg}\"")

        elif typ == "error":
            print(f"Error occured: {msg}")
