#!/usr/bin/env python3

# Zac the Wise on 24 May
# Little script that adds emojis and labels for git commits
# More info: https://github.com/TechWiz-3/git-commit-emojis 

from sys import argv  # import cli arguement function
from sys import exit  # import exit function
from os import system


BOLD = "\u001b[1m"
RESET = "\033[0m"


def get_opts():
    """Get cli options/arguements"""
    for arg in argv[1:]:  # gets arguements except the first one and assigns them
        if arg == "-m":  # message option
            commit_message = ""
            # get the argument for the option
            get_arg_index = argv.index('-m')  # find the index number for the option
            get_arg_index=get_arg_index+1
            try:
                args_after_m = argv[get_arg_index:]
                for msg_word in args_after_m:
                    commit_message += f"{msg_word} "
                commit_message = commit_message[:-1]  # remove extra space from end
            except IndexError:
                return "error", "You didn't include the arguement for the commit message like so: -m \"my commit message\""
            else:
                if commit_message == "":  # if the commit message is empty
                    return "error", "Commit message cannot be empty"
                return "message only", commit_message
        elif arg == "-sh":
            get_arg_index = argv.index('-sh')  # find the index number for the option
            try:
                shortcut = argv[get_arg_index+1]  # get the arguement after the option and assign it
            except IndexError:
                    from help_cmds import Help
                    Help(cmd="shortcuts")  # displays help message from help_cmds.py
            else:
                if shortcut == "ty" or shortcut == "typo":
                    commit_message = "‚úèÔ∏è FIX TYPO"
                    return "shortcut", commit_message
                elif shortcut == "cl" or shortcut == "clean":
                    commit_message = "üßπ CLEAN UP"
                    return "shortcut", commit_message
                elif shortcut == "in" or shortcut == "init" or shortcut == "initial":
                    commit_message = "üéâ INITIAL COMMIT"
                    return "shortcut", commit_message
                elif shortcut in ("ln", "lint", "linter"):
                    commit_message = "üö® FIX LINT WARNINGS"
                    return "shortcut", commit_message
                else:
                    return "error", "Unrecognized shortcut usage. Use commit -sh for a list of available shortcuts"
        elif arg in ("-s", "--strict"):  # strict select menu option
            commit_message = ""  # label + user input message
            message = ""  # raw user input message
            get_arg_index = argv.index(arg)
            try:
                args_after_s = argv[get_arg_index+1:]
                if args_after_s[0] == "-m":
                    try:
                        message = args_after_s[1]
                    except IndexError:
                        return "error", "You didn't include the arguement for the commit message like so: -m \"my commit message\""
                    else:
                        if message == "":
                            return "error", "Commit message cannot be empty"
                        else:
                            message = args_after_s[1:]
                            for word in message:
                                commit_message += f"{word} "
                            return "strict", commit_message
                elif args_after_s[0] == "":
                    return "error", "After the -s or --strict, add the commit message directly or with the -m switch"
                else:
                    message = args_after_s[0:]
                    for word in message:
                        commit_message += f"{word} "
                    return "strict", commit_message
            except IndexError:
                return "error", "You need to include your commit message after the -s or --strict option, you can do this directly after the option or use the -m <commit message> option"

        elif arg in ("-e", "--extra", "--extra-menu"):
            commit_message = ""
            message = ""
            get_arg_index = argv.index(arg)
            try:
                args_after_e = argv[get_arg_index+1:]
                if args_after_e[0] == "-m":
                    try:
                        message = args_after_e[1]
                    except IndexError:
                        return "error", "You didn't include the arguement for the commit message like so: -m \"my commit message\""
                    else:
                        if not message:  # message is empty
                            return "error", "Commit message cannot be empty"
                        else:
                            message = args_after_e[1:]
                            for word in message:
                                commit_message += f"{word} "
                            commit_message = commit_message[:-1]
                            return "extra", commit_message
                elif not args_after_e:  # if empty
                    return "error", "After the -s or --strict, add the commit message directly or with the -m switch"
                else:
                    message = args_after_e
                    for word in message:
                        commit_message += f"{word} "
                    return "extra", commit_message
            except IndexError:
                return "error", "You need to include your commit message after the -s or --strict option, you can do this directly after the option or use the -m <commit message> option"
        elif arg in ("-sa", "--show-all", "--showall"):
            show_all()
            return exit()
        elif arg == "-h" or arg == "--help":  # help option
            from help_cmds import Help
            Help(cmd="regular")  # displays help message from help_cmds.py
            return exit()  # stop the rest of the program from running


def get_special_opts():
    """Get special options which come after the commit message"""
    # special options are:
    # --push, --add. --label --add-push
    args = argv[1:]
    pre_commit_commands = []
    post_commit_commands = []
    recognised_commands = ["--add", "--push"]
    for arg in args:
        if arg in ("-m", "-e", "--extra", "-s", "--strict"): # args that have commit messages after them
            break
        if arg in ("-l", "--label", "--get-label"):
            # break since push and add are not available with this option
            pre_commit_commands.append("--label")
            break
        if arg in ("-ap", "--add-push"):
            # for convenience, this command will be passed
            # in with the pre and post commit commands
            pre_commit_commands.append("--add-push")
            post_commit_commands.append("--add-push")
        if "--push" == arg:
            post_commit_commands.append("--push")
        if "--add" == arg:
            pre_commit_commands.append("--add")

    return pre_commit_commands, post_commit_commands


def commands_execution(label, message, special_opts: tuple = None, shortcut: bool = False):
    precommit, postcommit = special_opts  # returns a list for each, if no options then they're empty
    if precommit:  # if precommit isn't empty
        if "--label" in precommit:
            # return with the commit label and exit
            print("")
            print(f"{label}{message}")
            print("")
            print("Exiting, have a happy commit...")
            print("")
            exit()
        if "--add-push" in precommit:
            get_arg_index = argv.index("--add-push")
            try:
                args_after_add = argv[get_arg_index+1:]
            except IndexError:
                print("Please add the files you would like to add after the --add option. For more info see the --help special command")
                exit()
            else:
                from utils import CommitUtils
                CommitUtils.add_files(args_after_add)

        if "--add" in precommit:
            get_arg_index = argv.index("--add")
            try:
                args_after_add = argv[get_arg_index+1:]
            except IndexError:
                print("Please add the files you would like to add after the --add option. For more info see the --help special command")
                exit()
            else:
                from utils import CommitUtils
                CommitUtils.add_files(args_after_add)
    if shortcut:
        # do shortcut stuff
        system(f"git commit -m \"{message}\"")
    else:
        # do message stuff
        system(f"git commit -m \"{label}{message}\"")
    # check that the command was excuted successfully
    if postcommit:
        if "--push" in postcommit or "--add-push" in postcommit:
            system("git push")


def select_menu():
    """Displays the select menu and returns the value to enter into the commit"""
    options = ["üëå Improvement", "üì¶ Addition", "üìñ Documentation", "üêõ Bug-fix", "üîñ Version-tag", "üö™ Exit"]
    commit_label = ""
    select_label = None
    for option in options:
        opt_no = options.index(option)
        print(f"{opt_no+1}) {option}")
    select_label = input("Enter the number corresponding to which type of change you made: ")
    try:  # attempt to convert input to an integer
        select_label = int(select_label)
    except ValueError:  # if a number isn't entered
        # attempt to remove any accidentally mistyped special characters
        from re import sub
        remove = "[m'/\]\\\\]"  # characters that can be easily mistyped with an enter press
        # the reason there are 4 backslashes is because
        # one backslash is the user input, another is
        # added automatically, an extra backslash is
        # added to each to show that we're using
        # backslashes instead of escape characters
        # yeah that was fun lmao
        select_label = str(select_label)
        select_label = sub(remove, '', select_label)
        # after removing characters try converting back to integer
        try:
            select_label = int(select_label)
        except ValueError:  # if the conversion doesn't work
            print("üßô This ain't fair, I'm a CLI tool not a wizard (yet). Please enter numbers not characters lol.")
            exit()

    select_menu_labels = {  # list each select menu number and it's corresponding commit label
        1   :   "üëå IMPROVE: ",
        2   :   "üì¶ NEW: ",
        3   :   "üìñ DOC: ",
        4   :   "üêõ FIX: ",
        5   :   "üîñ "
    }
    # loop through the menu number and label
    for menu_number, label in select_menu_labels.items():
        if select_label == menu_number:
            commit_label = label
            return commit_label
    # if none of the label options were selected
    if select_label == 6:  # exit option
        print("Exiting have a nice day...")
        exit()
    else:
        print("Unrecognised menu option, exiting...")
        exit()


def second_menu():
    """Displays another select menu with more options that are used less often"""
    options = [
        "üîß Configuration files",
        "üöö Move files",
        "üôà Ignore files",
        "‚ùå Remove files",
        "üö™ Exit"
    ]
    for option in options:
        opt_no = options.index(option)
        print(f"{opt_no + 1}) {option}")

    select_label = input("Enter the number corresponding to which type of change you made: ")
    try:  # attempt to convert input to an integer
        select_label = int(select_label)
    except ValueError:  # if a number isn't entered
        # attempt to remove any accidentally mistyped special characters
        from re import sub
        remove = "[m'/\]\\\\]"  # characters that can be easily mistyped with an enter press
        # the reason there are 4 backslashes is because
        # one backslash is the user input, another is
        # added automatically, an extra backslash is
        # added to each to show that we're using
        # backslashes instead of escape characters
        # yeah that was fun lmao
        select_label = str(select_label)
        select_label = sub(remove, '', select_label)
        # after removing characters try converting back to integer
        try:
            select_label = int(select_label)
        except ValueError:  # if the conversion doesn't work
            print("üßô This ain't fair, I'm a CLI tool not a wizard (yet). Please enter numbers not characters lol.")
            exit()

    select_menu_labels = {
        1   :   "üîß CONFIG: ",
        2   :   "üöö MOVE: ",
        3   :   "üôà IGNORE: ",
        4   :   "‚ùå REMOVE: "
    }
    for menu_number, label in select_menu_labels.items():
        if select_label == menu_number:
            commit_label = label
            return commit_label
    # if this is running then the option used hasn't been recognised
    if select_label == 5:
        print("Exiting, have a nice day...")
        exit()
    else:
        print("Unrecognised menu option, exiting...")
        exit()


def strict_menu():
    """Displays a select menu which strictly follows the labels specified by
    the emoji log project by ahmadawais"""
    options = ["üëå Improvement", "üì¶ Addition", "üìñ Documentation", "üêõ Bug-fix", "üöÄ Release", "ü§ñ Test", "‚ÄºÔ∏è  Breaking", "üö™ Exit"]
    for option in options:
        opt_no = options.index(option)
        print(f"{opt_no+1}) {option}")
    select_label = input("Enter the number corresponding to which type of change you made: ")

    try:
        select_label = int(select_label)
    except ValueError:
        # attempt to remove any accidentally mistyped special characters
        from re import sub
        remove = "[;m'/\]\\\\]"  # characters that can be easily mistyped with an enter press
        # the reason there are 4 backslashes is because
        # one backslash is the user input, another is
        # added automatically, an extra backslash is
        # added to each to show that we're using
        # backslashes instead of escape characters
        # yeah that was fun lmao
        select_label = str(select_label)
        select_label = sub(remove, '', select_label)
        # after removing characters try converting back to integer
        try:
            select_label = int(select_label)
        except ValueError:  # if the conversion doesn't work
            print("üßô This ain't fair, I'm a CLI tool not a wizard (yet). Please enter numbers not characters lol.")
            exit()

    select_menu_labels = {
            1   :   "üëå IMPROVE: ",
            2   :   "üì¶ NEW: ",
            3   :   "üìñ DOC: ",
            4   :   "üêõ FIX: ",
            5   :   "üöÄ RELEASE: ",
            6   :   "ü§ñ TEST: ",
            7   :   "‚ÄºÔ∏è BREAKING: "
        }

    for menu_number, label in select_menu_labels.items():
         # if entered value corresponds to dict item number
        if select_label == menu_number:
            # assign the label to be the label
            # corresponding to the related number
            commit_label = label
            return commit_label
    # if this is running then the option used hasn't been recognised
    if select_label == 8:
        print("Exiting, have a nice day...")
        exit()
    else:
        print("Unrecognised menu option, exiting...")
        exit()


def show_all():
    """Displays a list of all select menu options and their message results"""
    print("")
    print(f"{BOLD}Standard select menu:{RESET}")
    print("")
    print("1) üëå Improvement        üëå IMPROVE: <message>")
    print("2) üì¶ Addition           üì¶ NEW: <message>")
    print("3) üìñ Documentation      üìñ DOC: <message>")
    print("4) üêõ Bug-fix            üêõ FIX <message>")
    print("5) üîñ Version-tag        üîñ <message>")
    print("")
    print("")
    print(f"{BOLD}Extra select menu{RESET}")
    print("")
    print("1) üîß Config files       üîß CONFIG: <message>")
    print("2) üöö Move files         üöö MOVE: <message>")
    print("3) üôà Ignore files       üôà IGNORE: <message>")
    print("4) ‚ùå Remove files       ‚ùå REMOVE: <message>")
    print("")
    print("")
    print(f"{BOLD}Strict select menu (emoji-log){RESET}")
    print("")
    print("1) üëå Improvement        üëå IMPROVE: <message>")
    print("2) üì¶ Addition           üì¶ NEW: <message>")
    print("3) üìñ Documentation      üìñ DOC: <message>")
    print("4) üêõ Bug-fix            üêõ FIX: <message>")
    print("5) üöÄ Release            üöÄ RELEASE: <message>")
    print("6) ü§ñ Test               ü§ñ TEST: <message>")
    print("7) ‚ÄºÔ∏è  Breaking           ‚ÄºÔ∏è BREAKING: <message>")
    print("")


if __name__ == "__main__":

    options = get_opts()
    if options == None:
        print("Incorrect usage. Refer to commit --help")
        print("")
    else:
        special_opts = get_special_opts()
        typ, msg = options  # assign the results of get_opts
        if typ == "message only":
            label = select_menu()
            commands_execution(label, msg, special_opts=special_opts)

        elif typ == "strict":
            label = strict_menu()
            commands_execution(label, msg, special_opts=special_opts)

        elif typ == "extra":
            label = second_menu()
            commands_execution(label, msg, special_opts=special_opts)

        elif typ == "shortcut":
            commands_execution(None, msg, shortcut=True, special_opts=special_opts)

        elif typ == "error":
            print(f"Error occured: {msg}")
